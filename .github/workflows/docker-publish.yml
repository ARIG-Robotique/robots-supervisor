name: Docker publish

on:
  push:
    # Publish `dev` as Docker `latest` image.
    branches:
      - dev

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
#  test:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Run tests
#        run: |
#          if [ -f docker-compose.test.yml ]; then
#            docker-compose --file docker-compose.test.yml build
#            docker-compose --file docker-compose.test.yml run sut
#          else
#            docker build . --file Dockerfile
#          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
#    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Define vars
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "dev" ] && VERSION=latest

          echo "IMAGE_ID=$IMAGE_ID"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"
          echo "VERSION=$VERSION"

          # Register variables
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.IMAGE_ID }}:${{ env.VERSION }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
